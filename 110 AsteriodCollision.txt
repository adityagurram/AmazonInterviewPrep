public class Solution {
    public int[] AsteroidCollision(int[] asteroids) {
     
        
        //here the algo is to use stack and find out whether incoming asteriods fits in stack or causes trouble to existing asteriods
        
        Stack<int> stack= new Stack<int>();
        
        for(int i=0; i<asteroids.Length; i++ )
        {
            if(stack.Count ()==0 || asteroids[i]>0)
            {
                //If the stack is empty, I dont care abt first ateriod, it goes in there
                //If the incoming asteroid is postive then also I dont care bcz [5] 5 no issues, [-5] 5 no issues, no colision
                stack.Push (asteroids[i]);
            }
            else //this says ateriod is -ve
            {
              //check for top stack is -ve then we dont have a problem
            while (true)// we need to recursively check till all collisions are done
            { 
                int peek= stack.Peek();
                if(peek < 0)
                {
                    //push it
                    stack.Push (asteroids[i]);
                    break;
                }
                else
                {
                     
                        //this is the case where peek is +ve and incoming is -ve
                        //we need to check all the cases
                        if(peek == -asteroids[i])
                        {
                            stack.Pop();// both will collide 
                            break;
                        }
                        else if(peek > -asteroids[i])
                        {
                            //do nothing
                            break;
                        }
                        else
                        {
                            //peek is smaller and asteriod is bigger (willing to collide)
                            stack.Pop();
                            //once it is done then add it only if stack is empty bcz bigger asteriod clears all the of them [1 2 3] -4
                            if(stack.Count ==0)
                            {
                                stack.Push (asteroids[i]);
                                break;
                            }
                        }
                    }
                }
            }
        }
        
        //convert stack to int[]
        int [] res= new int [stack.Count ()];
        int index = res.Length -1;
        while(stack.Count () >0)
        {
            res[index--]= stack.Peek();
            stack.Pop();
        }
        
        return res;
    }
}