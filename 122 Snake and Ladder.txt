 public int SnakesAndLadders(int[][] board)
        {

            // we need BFS algo to find the shortest path
            //But we need to model given data
            Dictionary<int, int> dict = new Dictionary<int, int>();
            int last = board.Length - 1;
            int first = 0;

            for (int i = last; i >= 0; i--)
            {
                for (int j = 0; j < board[i].Length; j++)
                {
                    first++;
                    if (board[i][j] == -1)
                    {
                        dict.Add(first, first);

                    }
                    else
                    {
                        dict.Add(first, board[i][j]);
                    }

                }
            }

            Dictionary<int, List<int>> adjList = new Dictionary<int, List<int>>();


            for (int pos = 0; pos <= board.Length * board[0].Length; pos++)
            {
                for (int dice = 1; dice <= 6; dice++)
                {
                    if (pos + dice <= board.Length * board[0].Length)
                    {
                        //apply BFS algo
                        if (!adjList.ContainsKey(pos))
                        {
                            adjList.Add(pos, new List<int>());
                            adjList[pos].Add(dict[pos + dice]);
                        }
                        else
                        {
                            adjList[pos].Add(dict[pos + dice]);
                        }

                    }
                }
            }

            bool[] visited = new bool[board.Length * board[0].Length];
            Queue<int> q = new Queue<int>();
            q.Enqueue(0);
            int result = 0;
            while (q.Count() > 0)
            {
                int qCount = q.Count();

                for (int i = 0; i < qCount; i++)
                {
                    int position = q.Dequeue();
                    foreach (int neighbor in adjList[position])
                    {
                        if (neighbor == board.Length * board[0].Length)
                        {
                            return result + 1;
                        }
                        if (!visited[neighbor])
                        {
                            visited[neighbor] = true;
                            q.Enqueue(neighbor);
                        }
                    }
                }
                result++;
            }

            return result;
        }