/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    TreeNode first=null;
    TreeNode second= null;
    
    TreeNode prev= new TreeNode (Int32.MinValue);
    public void RecoverTree(TreeNode root) {
      //so the algo goes like this
        //Based on the Inorder traversal we can find the if BST condition fails.
        //Since they said only 2 fail nodes, we can maintain 2 pointers first and second and identify when it fails and then swap the values
        //Prev and root are confusing just think how inorder works
        //if u on left side trav then root will be ur root and left ll become prev as we ll reach left child first before reading root val
        //opposite for right side tree traversal
        
        Inorder (root);
        int temp= first.val;
        first.val= second.val;
        second.val= temp;
        
    }
    
    private void Inorder(TreeNode root)
    {
        if(root==null)
        {
             return ;
            
        }
        
        Inorder (root.left);
            
        //here is the printing means visiting
            
        if(first==null && prev.val > root.val )
        {
            first= prev;
        }
        
        if(first!=null && prev.val > root.val)
        {
            second= root;
        }
        
        prev=root;
            
        Inorder (root.right);
    }
}