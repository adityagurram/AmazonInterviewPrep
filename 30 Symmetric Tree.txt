/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsSymmetric(TreeNode root) {
        
      if(root ==null) return true;
        
      return   helper (root.left, root.right);
    }
    
    private bool helper (TreeNode left, TreeNode right)
    {
        if(left==null || right ==null)
        {
            return left==right;
        }
        
   
        if(left.val != right.val)
        {
            return false;
        }
        
        return helper (left.left, right .right) && helper (left.right, right.left);
    }
}













//Iterative Method
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsSymmetric(TreeNode root) {
        
     if (root == null) return true;

            Queue<TreeNode> q = new Queue<TreeNode>();
            q.Enqueue(root);
            int level = 1;

            if (root.left == null && root.right == null) return true;

            while (q.Count() > 0)
            {
                int qCount = q.Count();
                List<int> temp = new List<int>();
                for (int i = 0; i < qCount; i++)
                {
                    TreeNode tempNode = q.Dequeue();
                    if (level > 1)
                    {
                        temp.Add(tempNode.val);
                        if (tempNode.val == -1000)
                        {
                            continue;
                        }
                    }

                    if (tempNode.left != null)
                    {
                        q.Enqueue(tempNode.left);
                    }
                    else
                    {
                        q.Enqueue(new TreeNode(-1000));
                    }

                    if (tempNode.right != null)
                    {
                        q.Enqueue(tempNode.right);
                    }
                    else
                    {
                        q.Enqueue(new TreeNode(-1000));
                    }



                }

                if (level > 1 && temp.Count() > 0)
                {
                    int start = 0;
                    int end = temp.Count() - 1;
                    while (start < end)
                    {
                        if (temp[start] != temp[end])
                        {
                            return false;
                        }
                        start++;
                        end--;
                    }
                   

                }
                level++;


            }

            return true;
        
    }
    
    
}