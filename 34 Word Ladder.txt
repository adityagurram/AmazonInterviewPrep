public class Solution {
    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {
     
        HashSet<string> set= new HashSet<string> ();
        
        bool isPresent = false;
        foreach (string s in wordList)
        {
            if(!set.Contains (s))
            {
                set.Add (s);
            }
            
            if(s==endWord)
            {
                isPresent= true;
            }
        }
        
        if(isPresent== false) return 0;
        
        Queue<string> q= new Queue< string> ();
        q.Enqueue (beginWord);
        int depth=1;
        while (q.Count () > 0)
        {
            int qCount= q.Count ();
            
            for(int i=0; i< qCount ; i++)
            {
                string temp= q.Dequeue ();
                
                for(int j=0; j< temp.Length ; j++)
                {
                    char [] cTemp= temp.ToCharArray();
                    char c1= cTemp[j];
                    for(char c='a' ;c<='z'; c++)
                    {
                        cTemp[j]= c;
                        String newWord= new String (cTemp);
                        if(newWord== temp)
                        {
                            continue;
                        }
                        if(newWord==endWord)
                        {
                            return depth +1;
                        }
                        
                        if(set.Contains (newWord))
                        {
                            q.Enqueue (newWord);
                            set.Remove (newWord);
                        }
                    }
                    cTemp[j]=c1;
                }
                
            }
            depth ++;
        }
        return 0;
    }
}