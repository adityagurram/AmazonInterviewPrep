public class Solution {
    public bool Exist(char[][] board, string word) {
        
        if(board==null || board[0].Length ==0)
        {
             return false;
        }
        
        List<char> slate= new List<char> ();
        for(int i=0; i< board.Length ; i++)
        {
            for(int j=0; j< board[i].Length ; j++)
            {
                if(word[0]==board[i][j])
                {
                    if(helper(i, j, ref board, word, slate)== true)
                    {
                         return true;
                    }
                }
                 
            }
        }
       
        
        return false;
        
    }
    
    private bool helper (int i, int j, ref char [][] board, string word, List< char> slate)
    {
       
        if(slate.Count () == word.Length)
        {
            string temp= new string (slate.ToArray ());
        
            if(temp== word)
            {
                 return true;
            }
        }
        
        
        if(i<0 || i>= board.Length || j<0 || j>= board[i].Length || board [i][j] =='0' )
        {
             return false;
        }
        
         slate. Add (board[i][j]);
        char c= board[i][j];
         board[i][j]='0';
        
      if(  helper (i+1, j, ref board,word, slate )== true ) return true;
       if( helper (i-1, j, ref board,word, slate )==true) return true;
      if(  helper (i, j+1 ,ref board,word, slate )== true ) return true;
       if( helper (i, j-1, ref board,word, slate )==true) return true;
        board[i][j]=c;
        slate.RemoveAt(slate.Count () -1);
        
        
        
       return false;
    }
}























public class Solution {
    public bool Exist(char[][] board, string word) {
        
        if(board==null || board[0].Length ==0)
        {
             return false;
        }
        
        List<char> slate= new List<char> ();
        for(int i=0; i< board.Length ; i++)
        {
            for(int j=0; j< board[i].Length ; j++)
            {
                if(word[0]==board[i][j])
                {
                    if(helper(i, j, ref board, word, 0)== true)
                    {
                         return true;
                    }
                }
                 
            }
        }
       
        
        return false;
        
    }
    
    private bool helper (int i, int j, ref char [][] board, string word, int index)
    {
       
        if(index == word.Length)
        {
           
                 return true;
        
        }
        
        
        if(i<0 || i>= board.Length || j<0 || j>= board[i].Length || word[index]!= board[i][j] )
        {
             return false;
        }
        
        
        char c= board[i][j];
         board[i][j]='0';
        
      if(  helper (i+1, j, ref board,word, index+1 )== true ) return true;
       if( helper (i-1, j, ref board,word, index +1 )==true) return true;
      if(  helper (i, j+1 ,ref board,word, index +1 )== true ) return true;
       if( helper (i, j-1, ref board,word, index +1 )==true) return true;
        board[i][j]=c;
       
        
        
        
       return false;
    }
}