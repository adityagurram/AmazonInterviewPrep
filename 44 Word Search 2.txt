public class Solution {
    public IList<string> FindWords(char[][] board, string[] words) {
        
        List<string> result= new List<string> ();
        
        if(board==null || board.Length ==0)
        {
             return result;
        }
        
        foreach( string word in words)
        {
             for(int i=0; i< board.Length ; i++)
             {
                 for (int j=0; j< board[i].Length ;j++)
                 {
                    if(word[0]== board[i][j])
                    {
                        if(helper (i, j, ref board, word, 0)==true)
                        {
                            if(!result.Contains (word)) 
                            result. Add (word);
                        }
                    }
                 }
             }
        }
        
        return result;
        
       
        
    }
    
      private bool helper (int i, int j, ref char [][] board, string word, int index)
    {
       
        if(index == word.Length)
        {
           
                 return true;
        
        }
        
        
        if(i<0 || i>= board.Length || j<0 || j>= board[i].Length || word[index]!= board[i][j] )
        {
             return false;
        }
        
        
        char c= board[i][j];
         board[i][j]='0';
        
     
      
       
        bool flag= helper (i+1, j, ref board,word, index+1 ) || helper (i-1, j, ref board,word, index+1 ) 
            || helper (i, j+1, ref board,word, index+1 )  || helper (i, j-1, ref board,word, index+1 ) ;
        
          board[i][j]=c;
        
       return flag;
    }
}