public class Solution {
    public int FindKthLargest(int[] nums, int k) {
        
        helper (ref nums, nums.Length - k, 0, nums.Length -1);
        return nums [nums.Length - k];
    }
    
    private void helper (ref int [] nums, int k, int start, int end)
    {
        if (start >= end )
        {
            return;
        }
        
        Random rand= new Random ();
        int randomIndex= rand.Next(start, end);
        
        int pivot= nums [randomIndex];
        
        int smaller=start;
        int bigger=start;
        
        swap(ref nums, smaller, randomIndex);
        
        for(int k1= bigger +1 ; k1<=end; k1++)
        {
            if(nums [k1] < pivot)
            {
                smaller++;
                swap(ref nums, k1, smaller);
            }
        }
        
        swap (ref nums, smaller, start);
        
        if(k==smaller)
        {
             return;
        }
        else if (k< smaller)
        {
            helper (ref nums, k, start, smaller -1);
        }
        else
        {
             helper (ref nums, k, smaller + 1, end);
        }
        
    }
    
    private void swap(ref int [] nums, int i, int j)
    {
        int temp= nums[i];
        nums[i]= nums[j];
        nums[j]= temp;
    }
}