class MedianFinder {
public:
    
    priority_queue<int>max;
    priority_queue<int,vector<int>,greater<int>>min;

    MedianFinder() {
        
    }
    
    void balance(){
        if(abs(int(max.size())-int(min.size())) > 1){
            if(max.size() > min.size()){
                min.push(max.top());
                max.pop();
            }
            else{
                max.push(min.top());
                min.pop();
            }
        }
    }
    
    void addNum(int num) {
        if(max.empty())
            max.push(num);
        else if(num > max.top())
            min.push(num);
        else if(min.empty()){
            min.push(max.top());
            max.pop();
            max.push(num);
        }
        else
            max.push(num);
        balance();
    }
    
    double findMedian() {
        double median;
        if((max.size() + min.size())%2 == 0){
            median = (max.top()+min.top())/(1.0*2);
        }
        else{
            if(max.empty())
                median = max.top();
            else if(min.size() < max.size())
                median = max.top();
            else
                median = min.top();
        }
        return median;
    }
};