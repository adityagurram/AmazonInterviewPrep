/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode BuildTree(int[] preorder, int[] inorder) {
        
        return helper (0,0, preorder.Length -1, preorder, inorder);
    }
    
    private TreeNode helper (int preStart, int start, int end , int[] preorder, int [] inorder)
    {
        if( start > end)// start > end is for any recurisive base case
        {
             return null;
        }
        
        TreeNode root= new TreeNode (preorder[preStart]);
        
        
        int mid=Array.IndexOf(inorder, root.val);
       
        
        root.left= helper (preStart +1, start, mid -1, preorder, inorder);
        root.right= helper (preStart +mid - start +1, mid+1, end, preorder, inorder);
        
        return root;
    }
}





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode BuildTree(int[] preorder, int[] inorder) {
        
        if(preorder==null || preorder.Length ==0)
        {
             return null;
        }
        
         if(inorder==null || inorder.Length ==0)
        {
             return null;
        }
        
        TreeNode root= new TreeNode (preorder[0]);
        int mid= Array.IndexOf(inorder,preorder[0]);
        
        var arrSegpreorder= new ArraySegment <int>(preorder, 1, mid - 1 +1);//mid included
        var arrSeginorder= new ArraySegment <int> (inorder, 0, mid);//mid excluded
        root.left= BuildTree(arrSegpreorder.ToArray(), arrSeginorder.ToArray());
        
        
          arrSegpreorder= new ArraySegment <int>(preorder, mid+1, preorder.Length -1 -(mid +1) +1);//endIndex - startIndex +1
         arrSeginorder= new ArraySegment <int> (inorder, mid +1 , inorder.Length -1 - (mid+1) +1);
        
        root.right= BuildTree(arrSegpreorder.ToArray(), arrSeginorder.ToArray());
        
        return root;
    }
}