/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> neighbors;

    public Node() {
        val = 0;
        neighbors = new List<Node>();
    }

    public Node(int _val) {
        val = _val;
        neighbors = new List<Node>();
    }

    public Node(int _val, List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

public class Solution {
    Dictionary<Node, Node> dict= new Dictionary<Node, Node > ();
    public Node CloneGraph(Node node) {
        
        if(node==null)
        {
             return null;
        }
        
        return DFS(node);
    }
    
    private Node DFS (Node node)
    {
        if(dict.ContainsKey(node))
        {
            return dict[node];
        }
       
        Node copy= new Node(node.val);
        dict.Add (node, copy);
        
        foreach(Node neigh in node.neighbors)
        {
         Node returnedCopy=   DFS (neigh);
         copy.neighbors.Add (returnedCopy);
        }
        
        return copy;
    }
}